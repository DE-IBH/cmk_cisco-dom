#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# cmk_cisco-dom - check-mk plugin for SNMP-based Cisco Digital-Optical-Monitoring monitoring
#
# Authors:
#   Thomas Liske <liske@ibh.de>
#
# Copyright Holder:
#   2015 (C) IBH IT-Service GmbH [http://www.ibh.de/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

# generate service name from SNMP values
def get_name_cisdom(sidx, names):
    import re
    for idx, name in names:
	if idx == sidx:
	    return re.sub(r' (\w)(ransmit|eceive) ', r' \1x ', name)
    return ''

# filter thresholds from SNMP values for a given sensor index
def filter_thresh_cisdom(sidx, sthresh):
    return [t for t in sthresh if re.match(r'^\.1\.3\.6\.1\.4\.1\.9\.9\.91\.1\.2\.1\.1\.2\.%s' % sidx, t[0])]

# get performance thresholds in nagios range format
def get_thresh_fmt(severity, precision, thresholds):
    trange = [None, None]
    for soid, ssever, srel, svalue, striggered in thresholds:
	if ssever in severity:
	    if srel in ['1', '2']:
		trange[0] = ("%." + precision + "f") % (int(svalue) * 10**(-1 * int(precision)))
	    elif srel in ['3', '4']:
		trange[1] = ("%." + precision + "f") % (int(svalue) * 10**(-1 * int(precision)))
    if trange[0] == None and trange[1] == None:
	return ''
    if trange[0] == None:
	return '~:' + trange[1]
    if trange[1] == None:
	return trange[0] + ':'
    return trange[0] + ":" + trange[1]

# get worst threshold trigger
def get_thresh_trigger(thresholds):
    severity = None
    for soid, ssever, srel, svalue, striggered in thresholds:
	if striggered == '1' and (severity == None or severity < int(ssever)):
	    severity = int(ssever)
    # critical
    if severity in [20, 30]:
	return 2
    # warning
    if severity in [10]:
	return 1
    # unknown
    if severity != None:
	return 3
    return 0

# generate list of valid monitors
def inventory_cisdom(checktyp, info):
    inventory = []
    for sidx, stype, sprecis, svalue, sstatus in info[0]:
	# ignore monitors in the state 'unavailable' or 'nonoperational'
	if stype == '14' and sstatus == '1':
	    sid = get_name_cisdom(sidx, info[1])
	    if sid != '':
		inventory.append( (sid, [sidx, int(svalue) * 10**(-1 * int(sprecis)) ]) )
    return inventory

# eval service state
def check_cisdom(item, params, info):
    for sidx, stype, sprecis, svalue, sstatus in info[0]:
        if sidx == params[0]:
	    sthresh = filter_thresh_cisdom(sidx, info[2])
	    spower = int(svalue) * 10**(-1 * int(sprecis))
	    sdescr = ("Power Level %." + sprecis + "f dBm (Î” %." + sprecis + "f dB)") % (spower, (spower - params[1]))
	    perf = [
		['power level', ("%." + sprecis + "f") % spower, get_thresh_fmt('10', sprecis, sthresh), get_thresh_fmt('20', sprecis, sthresh), '', ''],
		['deviation', ("%." + sprecis + "f") % (spower - params[1]), '-0.5:0.5', '-1.0:1.0', '', ''],
	    ]
	    tsever = get_thresh_trigger(sthresh)
	    if tsever == 2:
		sdescr += " - SNMP threshold critical"
	    elif tsever == 1:
		sdescr += " - SNMP threshold warning"
	    elif tsever == 3:
		sdescr += " - SNMP threshold unknown"

	    dsever = 0
	    if sstatus != '1':
		sdescr += " - sensor status unknown"
		dsever = 3
	    elif abs(spower - params[1]) > 1:
		sdescr += " - deviation critical"
		dsever = 2
	    elif abs(spower - params[1]) > 0.5:
		sdescr += " - deviation warning"
		dsever = 1
	    return (max([tsever, dsever]), sdescr, perf)

    return (3, "index '%s' not found in SNMP table" % sidx)


# check registry
check_info["cisco_dom"] = {
    'check_function':          check_cisdom,
    'inventory_function':      inventory_cisdom,
    'service_description':     'DOM %s',
    'snmp_info':               [
	# entSensorValueEntry
	('.1.3.6.1.4.1.9.9.91.1.1.1.1', [OID_END, '1', '3', '4', '5']),
	# entPhysicalEntry
	('.1.3.6.1.2.1.47.1.1.1.1', [OID_END, '7']),
	# entSensorThresholdEntry
	('.1.3.6.1.4.1.9.9.91.1.2.1.1', [OID_STRING, '2', '3', '4', '5'])
    ],
    'snmp_scan_function':      \
     lambda oid: oid(".1.3.6.1.4.1.9.9.91.1.1.1.1.*") != None,
    'has_perfdata':            True,
}
